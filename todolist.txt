
# autoWeCom 项目 To-Do List

## 1. 项目结构设计

- [ ] 创建基本目录结构：
  - `/autoWeCom` - 项目根目录
  - `/autoWeCom/config` - 配置文件目录
  - `/autoWeCom/utils` - 通用工具函数
  - `/autoWeCom/scripts` - 脚本文件目录
  - `/autoWeCom/core` - 核心业务逻辑
  - `/autoWeCom/views` - 界面视图组件
  - `/autoWeCom/assets` - 静态资源（图标、图片等）
  - `/autoWeCom/tests` - 单元测试目录

- [ ] 创建打包配置：
  - 添加 `setup.py` 或 `pyproject.toml` 配置
  - 配置 PyInstaller 或 cx_Freeze 用于生成 exe 文件

## 2. 应用框架设计

- [ ] 设计应用的整体架构：
  - 创建应用主框架类，继承 `wx.Frame`
  - 实现 MVC/MVVM 模式的基础架构

- [ ] 主界面布局设计：
  - 设计顶部应用名称及操作栏
  - 设计左侧菜单栏
  - 实现右侧内容区域的布局管理

## 3. 核心组件开发计划

- [ ] 开发应用配置管理系统：
  - 设计配置加载、保存和更新机制
  - 实现用户配置和系统配置分离

- [ ] 开发页面切换系统：
  - 设计页面切换控制器
  - 实现页面间数据传递机制

- [ ] 设计菜单系统：
  - 菜单项的定义和配置结构
  - 菜单点击事件处理

## 4. 界面组件开发计划

- [ ] 开发顶部应用栏：
  - 应用名称显示
  - 两个全局操作按钮的实现

- [ ] 开发左侧菜单组件：
  - 可选中的菜单项列表
  - 支持图标和文本的菜单项

- [ ] 开发内容页面框架：
  - 基础页面类设计
  - 页面间切换动画（可选）

## 5. 打包与部署规划

- [ ] 设计资源文件打包策略：
  - 确定如何打包和访问静态资源

- [ ] 建立exe打包流程：
  - 配置 PyInstaller 或其他打包工具
  - 设计单文件和安装包两种打包方式

## 6. 测试与质量保证

- [ ] 设计单元测试框架：
  - 为核心逻辑创建测试用例
  - 为UI组件创建测试用例

- [ ] 建立集成测试策略：
  - 测试整个应用的工作流程

## 7. 文档规划

- [ ] 创建代码文档规范：
  - 确定注释格式和文档生成工具

- [ ] 撰写用户文档：
  - 创建使用手册大纲
